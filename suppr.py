import requests
import os
import time

# Notion API key et Database ID
NOTION_API_KEY = os.getenv("NOTION_API_KEY")
DATABASE_ID = os.getenv("DATABASE_ID")

# Headers pour l'API Notion
headers = {
    "Authorization": f"Bearer {NOTION_API_KEY}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

# Fonction pour r√©cup√©rer tous les √©v√©nements (pages) de la base de donn√©es
def get_all_events():
    url = f"https://api.notion.com/v1/databases/{DATABASE_ID}/query"
    events = []
    has_more = True
    next_cursor = None

    while has_more:
        payload = {"page_size": 100}
        if next_cursor:
            payload["start_cursor"] = next_cursor

        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            events.extend(data["results"])
            has_more = data.get("has_more", False)
            next_cursor = data.get("next_cursor")
        else:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements: {response.status_code}")
            print(response.text)  # Afficher le texte brut pour √©viter l'erreur JSONDecodeError
            return []

    return events

# Fonction pour supprimer (archiver) un √©v√©nement
def archive_event(event_id):
    url = f"https://api.notion.com/v1/pages/{event_id}"
    data = {"archived": True}
    
    for attempt in range(3):  # Essayer jusqu'√† 3 fois en cas d'erreur
        response = requests.patch(url, headers=headers, json=data)
        
        if response.status_code == 200:
            print(f"‚úÖ √âv√©nement {event_id} archiv√© (supprim√©) avec succ√®s.")
            return True
        elif response.status_code in [429, 502]:  # Trop de requ√™tes ou erreur temporaire
            print(f"‚ö†Ô∏è Erreur {response.status_code} pour {event_id}, nouvelle tentative dans 5s...")
            time.sleep(5)  # Attendre avant de r√©essayer
        else:
            print(f"‚ùå Erreur lors de la suppression de {event_id}: {response.status_code}")
            print(response.text)  # Afficher le texte brut pour voir le probl√®me
            return False

# Fonction principale pour supprimer tous les √©v√©nements
def delete_all_events():
    events = get_all_events()
    if not events:
        print("üì≠ Aucun √©v√©nement trouv√© dans le calendrier.")
        return

    print(f"üìå {len(events)} √©v√©nements trouv√©s. Suppression en cours...")
    
    for event in events:
        archive_event(event["id"])
        time.sleep(1)  # Attendre 1s entre chaque suppression pour √©viter d'√™tre bloqu√©

    print("‚úÖ Tous les √©v√©nements ont √©t√© archiv√©s avec succ√®s.")

